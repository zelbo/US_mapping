Covid by voter affiliation
Specifications
Color coded by political party.
Intensity by value (population, # of voters, drivers, bear attacks, whatever)
Alaska/Hawaii inset
Identifier key merge tool
    Fips, zip, STUSPS, zctz, county, state, region

Possible solutions
make a map by vote, set colors
make that the background to another map that is set to alpha transparency by value

or

make background greyscale by value
overlay transparent (%50 alpha?) by politics

Alaska/hawaii just create two new data frames. Then in map layout, you should be able to independently resize/move them.

how to convert between fips/zip/name?
Join these to csv to get something that can then be joined to shapefile.
fips/zip/county merge.csv
alaska/hawaii/other resize insert for display shape
display background in geopandas - political coloring?

Links of interest
Fips linking
https://github.com/kjhealy/fips-codes
https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/OSLU4G
https://www.census.gov/geographies/reference-files/2017/demo/popest/2017-fips.html
https://www.nrcs.usda.gov/wps/portal/nrcs/detail/national/home/?cid=nrcs143_013697
https://catalog.data.gov/dataset/zip-codetabilation-area-boundaries
https://simplemaps.com/data/us-zips (CCA 4.0)
https://www.udsmapper.org/zcta-crosswalk.cfm
https://www.census.gov/programs-surveys/geography/guidance/geo-areas/zctas.html

https://geopandas.org/mapping.html
https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5

https://en.m.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county

https://www.nrcs.usda.gov/wps/portal/nrcs/detail/national/home/?cid=nrcs143_013697

Some geopandas info:
https://jcutrer.com/python/learn-geopandas-plotting-usmaps
https://towardsdatascience.com/mapping-with-matplotlib-pandas-geopandas-and-basemap-in-python-d11b57ab5dac


Code snippets

Display some sample data to double check that your file loaded properly and looks right:
print(df.head())
Show headings of file to find key to join on:
print(df.columns)

df.head() and df.columns should both print out in a python shell, but print() should be used to make sure it outputs for all environments.

#seperate alaska/hawaii
AK = map_df[map_df['STUSPS'] == 'AK']
HI = map_df[map_df['STUSPS'] == 'HI']
US_MAIN = map_df[map_df['STUSPS'] != 'AK']
US_MAIN = map_df[map_df['STUSPS'] != 'HI']

#resize
for t in range(len(shape)):
            l = list(shape[t])
            l[1] -= 4000000
            l[0] += 1000000
            tup = tuple(l)
            shape[t] = tup

Miscellaneous

Here are some cmap codes you can play around with.
More info on colormaps can be found here https://matplotlib.org/tutorials/colors/colormaps.html
viridis, plasma, inferno, magma, cividis
Greys, Purples, Blues, Greens, Oranges, Reds
YlOrBr, OrRd, PuRd, RdPu, BuPu, GnBu, PuBu, YlGnBu, PuBuGn, BuGn, YlGn
PiYg, PRGn, BrBG, PuOr, RdGy, RdBu, RdYlBu, Spectral, coolwarm, bwr, seismic
twilight, twilight_shifted, hsv
Pastel1, Pastel2, PAired, Accent, Dark2, Set1, Set2, Set3, tab10, tab20, tab20b, tab20c





search terms: python resize alaska shapefile
returns results for R
# holy fuck i found it maybe!
https://www.storybench.org/how-to-shift-alaska-and-hawaii-below-the-lower-48-for-your-interactive-choropleth-map/
# it's for the R language. bleh.
https://rud.is/b/2014/11/16/moving-the-earth-well-alaska-hawaii-with-r/
https://stackoverflow.com/questions/13757771/relocating-alaska-and-hawaii-on-thematic-map-of-the-usa-with-ggplot2/13767984#13767984
# python!
https://chrishavlin.com/2016/11/16/shapefiles-tutorial/
https://pypi.org/project/pyshp/



ZIP Code Tabulation Areas (ZCTAs) are generalized areal representations of United States Postal Service (USPS) ZIP Code service areas.
The USPS ZIP Codes identify the individual post office or metropolitan area delivery station associated with mailing addresses. USPS ZIP Codes are not areal features but a collection of mail delivery routes.
The term ZCTA was created to differentiate between this entity and true USPS ZIP Codes.  ZCTA is a trademark of the U.S. Census Bureau; ZIP Code is a trademark of the U.S. Postal Service.

https://lehd.ces.census.gov/data/schema/latest/lehd_shapefiles.html
https://postalpro.usps.com/address-quality/ais-viewer


United States's Federal Information Processing Standards (FIPS) are publicly announced standards developed by the National Institute of Standards and Technology for use in computer systems by non-military American government agencies and government contractors.[1]
FIPS standards are issued to establish requirements for various purposes such as ensuring computer security and interoperability, and are intended for cases in which suitable industry standards do not already exist.[1] Many FIPS specifications are modified versions of standards used in the technical communities, such as the American National Standards Institute (ANSI), the Institute of Electrical and Electronics Engineers (IEEE), and the International Organization for Standardization (ISO).
ISO 3166 is a standard published by the International Organization for Standardization (ISO) that defines codes for the names of countries, dependent territories, special areas of geographical interest, and their principal subdivisions (e.g., provinces or states). The official name of the standard is Codes for the representation of names of countries and their subdivisions.

FIPS county code
             
From Wikipedia, the free encyclopedia
                                            Jump to navigation         Jump to search         
The Federal Information Processing Standard Publication 6-4 (FIPS 6-4) was a five-digit Federal Information Processing Standards code which uniquely identified counties and county equivalents in the United States, certain U.S. possessions, and certain freely associated states.
On September 2, 2008, the US Department of Commerce, following three years of review and comments from "public, research communities, manufacturers, voluntary standards organizations, and Federal, State, and local government organizations", announced that FIPS 6-4 was one of ten FIPS standards withdrawn by the department's National Institute of Standards and Technology (NIST).[1] Deemed "obsolete, or have not been updated to adopt current voluntary industry standards, federal specifications, federal data standards, or current good practices for information security",[1] the NIST replaced FIPS 6-4 with "INCITS 31 â€“ 2009" codes for the "Identification of the States and Equivalent Areas within the United States, Puerto Rico, and the Insular Areas".[2]
The five-digit codes of FIPS 6-4 used the two digit FIPS state code (FIPS Publication 5-2, also withdrawn on September 2, 2008), followed by the three digits of the county code within the state or possession. County FIPS codes in the United States are usually (with a few exceptions) in the same sequence as alphabetized county names within a state. They are usually (but not always) odd numbers, so that new or changed county names can be fit in their alphabetical sequence slot.
In response to the NIST decision, the U.S. Census Bureau announced that it would replace the FIPS 6-4 codes with the INCITS 31 codes after the 2010 Census, with the Census bureau assigning new codes as needed for their internal use during the transition. The Census Bureau decided that, based on decades of using the terminology FIPS to describe its codes, it would continue to use the FIPS name for its updated codes, where FIPS now stood for FIP "Series", since there no longer existed an official FIP "Standard".[3]
FIPS county codes were also used by the Emergency Alert System (EAS) and NOAA Weather Radio (NWR) to define geographic locations for their SAME-based public alerting systems.[4] In this application, a "0" (zero) is added as the first digit and used as a "placeholder", making each FIPS code a six-digit sequence. In the future, the first digit may be utilized in this numerical scheme to represent a predefined county subdivision.[5]

Points

class Point(coordinates)

    The Point constructor takes positional coordinate values or point tuple parameters.

>>> from shapely.geometry import Point
>>> point = Point(0.0, 0.0)
>>> q = Point((0.0, 0.0))

A Point has zero area and zero length.

>>> point.area
0.0
>>> point.length
0.0

Its x-y bounding box is a (minx, miny, maxx, maxy) tuple.

>>> point.bounds
(0.0, 0.0, 0.0, 0.0)

Coordinate values are accessed via coords, x, y, and z properties.


GeoSeries.scale(self, xfact=1.0, yfact=1.0, zfact=1.0, origin='center')

    Scale the geometries of the GeoSeries along each (x, y, z) dimensio.


GeoSeries.translate(self, xoff=0.0, yoff=0.0, zoff=0.0)

    Shift the coordinates of the GeoSeries.


DataFrame.to_csv(path/filename)



